// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                Int                 @unique @default(autoincrement())
  email             String              @unique
  password          String
  hashRt            String?
  role              Role                @default(User)
  createdAt         DateTime            @default(now())
  resetCode         String?
  Workouts          Workouts[]
  HealthData        HealthData?
  FavouriteWorkouts FavouriteWorkouts[]
  Achievements      Achievements[]
  Goals             Goals[]
  NutrionPlans      NutrionPlans[]
}

model Workouts {
  id                Int                 @unique @default(autoincrement())
  name              String
  description       String
  duration          Int
  imageUrl          String
  videoUrl          String
  user              User?               @relation(fields: [userId], references: [id])
  userId            Int?
  FavouriteWorkouts FavouriteWorkouts[]
  WorkoutToExercise WorkoutToExercise[]
  Exercise          Exercise?           @relation(fields: [exerciseId], references: [id])
  exerciseId        Int?
}

model WorkoutToExercise {
  id         Int      @id @default(autoincrement())
  workout    Workouts @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId  Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int

  @@unique([workoutId, exerciseId])
}

model Exercise {
  id                Int                 @unique @default(autoincrement())
  name              String
  description       String
  sets              String
  video             String
  image             String
  duration          Int?
  workouts          Workouts[]
  WorkoutToExercise WorkoutToExercise[]
  difficultyLevel   DifficultyLevels
  groupOfMuscles    groupOfMusculesENUM
}

model FavouriteWorkouts {
  id        Int      @unique @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  workout   Workouts @relation(fields: [workoutId], references: [id])
  workoutId Int
}

model HealthData {
  id           Int          @unique @default(autoincrement())
  age          Int
  gender       Gender
  weight       Float
  height       Float
  dateOfBirth  String
  primaryGoal  MainUserGoal
  fitnessLevel FitnessLevel
  user         User         @relation(fields: [userId], references: [id])
  userId       Int          @unique
}

model NutrionPlans {
  id          Int     @unique @default(autoincrement())
  name        String
  description String
  proteins    Float
  fats        Float
  carbs       Float
  kkal        Float
  isCustom    Boolean
  Meals       Meals[]
  User        User?   @relation(fields: [userId], references: [id])
  userId      Int?
}

model Meals {
  id            Int           @unique @default(autoincrement())
  name          String
  photo         String
  description   String
  recipe        String
  timeToPrepare Int
  proteins      Float
  fats          Float
  carbs         Float
  kkal          Float
  nutrition     NutrionPlans? @relation(fields: [nutritionId], references: [id])
  nutritionId   Int?
}

model Goals {
  id            Int   @unique @default(autoincrement())
  user          User  @relation(fields: [userId], references: [id])
  userId        Int
  exercisesDone Int
  weight        Float
}

model Achievements {
  id            Int      @unique @default(autoincrement())
  name          String
  description   String
  dateOfCollect DateTime @default(now())
  user          User?    @relation(fields: [userId], references: [id])
  userId        Int?
}

model Audit {
  id        Int      @unique @default(autoincrement())
  scope     String?
  name      String?
  text      String
  createdAt DateTime @default(now())
}

enum groupOfMusculesENUM {
  Chest
  Back
  Hips
  Bicep
  Triceps
  Delta
  Press
  Caviar
  Trapezium
  Forearm
}

enum Role {
  Admin
  User
}

enum Gender {
  Male
  Female
}

enum MainUserGoal {
  BuildMuscule
  EatBetter
  Increase_Endurance
  Improve_Fitness
  Burn_Fat
  Relieve_Stress
}

enum FitnessLevel {
  Beginner
  Low
  Medium
  Advanced
}

enum DifficultyLevels {
  Easy
  Medium
  Hard
  Light_Weitgh_Baby
}
